name: Deploy EastUS (from latest successful build)

on: workflow_dispatch

env:
  RESOURCE-GROUP: rg-eshoponweb-eastus
  LOCATION: eastus
  SUBSCRIPTION-ID: e36a3dde-b34b-42e4-aab7-f8fa0ca79452
  WEBAPP-NAME: devops-webapp-eastus-$(date +%s)

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1) Pull artifacts from the latest successful run of your build workflow
      - name: Download .net-app (zip) from latest successful build
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: eshoponweb-cicd.yml
          workflow_conclusion: success
          name: .net-app
          path: .net-app
          branch: main

      - name: Download Bicep artifact from latest successful build
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: eshoponweb-cicd.yml
          workflow_conclusion: success
          name: bicep-template
          path: bicep-template
          branch: main

      - name: Verify artifacts
        run: |
          ls -al .net-app || true
          ls -al bicep-template || true

      # 2) Install standalone Bicep CLI (no az CLI dependency)
      - name: Install Bicep CLI (standalone)
        shell: bash
        run: |
          set -e
          mkdir -p "$HOME/.local/bin"
          curl -sSLf -o "$HOME/.local/bin/bicep" \
            https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          chmod +x "$HOME/.local/bin/bicep"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          bicep --version

      # 3) Build Bicep -> ARM JSON
      - name: Build Bicep -> ARM JSON
        shell: bash
        run: |
          set -e
          mkdir -p arm-template
          bicep build bicep-template/webapp.bicep --outfile arm-template/webapp.json
          ls -al arm-template
          head -n 30 arm-template/webapp.json

      # 4) Ensure required resource providers are registered (safe if already registered)
      - name: Ensure providers registered (Web/Insights)
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az provider register --namespace Microsoft.Web --wait
            az provider register --namespace Microsoft.Insights --wait

      # 5) Check web app name availability; if taken, pick a unique one and export to env
      - name: Check Web App name & pick unique if needed
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            sub="${{ env.SUBSCRIPTION-ID }}"
            name="${{ env.WEBAPP-NAME }}"
            echo "Checking global availability for: $name"
            resp=$(az rest \
              --method post \
              --url "https://management.azure.com/subscriptions/$sub/providers/Microsoft.Web/checkNameAvailability?api-version=2022-09-01" \
              --body "{\"name\":\"$name\",\"type\":\"Microsoft.Web/sites\"}" \
              --output json)
            echo "$resp"
            if echo "$resp" | grep -q '"nameAvailable":\s*true'; then
              echo "Name available."
            else
              echo "Name not available. Generating a unique one..."
              suffix="${GITHUB_RUN_ID}${GITHUB_RUN_ATTEMPT}$(date +%s | tail -c 5)"
              newname="eshop-${suffix}"
              echo "Using WEBAPP-NAME=$newname"
              echo "WEBAPP-NAME=$newname" >> "$GITHUB_ENV"
            fi

      # 6) Validate & Deploy ARM JSON with Az PowerShell (prints inner errors if any)
      - name: Validate & Deploy with Az PowerShell (show inner errors)
        uses: azure/powershell@v2
        with:
          azPSVersion: latest
          inlineScript: |
            $ErrorActionPreference = "Stop"

            # Explicit SP login from AZURE_CREDENTIALS (keeps this step self-contained)
            $sp   = ($env:AZURE_CREDENTIALS | ConvertFrom-Json)
            $sec  = ConvertTo-SecureString $sp.clientSecret -AsPlainText -Force
            $cred = New-Object System.Management.Automation.PSCredential($sp.clientId, $sec)
            Connect-AzAccount -ServicePrincipal -Tenant $sp.tenantId -Credential $cred | Out-Null
            Select-AzSubscription -SubscriptionId "${{ env.SUBSCRIPTION-ID }}"

            $rg     = "${{ env.RESOURCE-GROUP }}"
            $name   = "eshoponweb-${{ github.run_id }}"
            $tmpl   = "arm-template/webapp.json"
            $params = @{ webAppName = "${{ env.WEBAPP-NAME }}"; location = "${{ env.LOCATION }}" }

            Write-Host ">>> Parameters:"; $params

            Write-Host ">>> Validating template..."
            try {
              Test-AzResourceGroupDeployment `
                -ResourceGroupName $rg `
                -TemplateFile $tmpl `
                -TemplateParameterObject $params `
                -ErrorAction Stop -Verbose
              Write-Host ">>> Validation passed."
            } catch {
              Write-Host "=== VALIDATION ERROR (raw) ==="
              $_ | Format-List -Force
              Write-Host "=== VALIDATION ERROR (resolved) ==="
              Resolve-AzError -Last | Format-List -Force
              throw
            }

            Write-Host ">>> Creating deployment $name ..."
            try {
              New-AzResourceGroupDeployment `
                -Name $name `
                -ResourceGroupName $rg `
                -TemplateFile $tmpl `
                -TemplateParameterObject $params `
                -Mode Incremental `
                -ErrorAction Stop -Verbose
              Write-Host ">>> Deployment succeeded."
            } catch {
              Write-Host "=== DEPLOYMENT ERROR (raw) ==="
              $_ | Format-List -Force
              Write-Host "=== DEPLOYMENT ERROR (resolved) ==="
              Resolve-AzError -Last | Format-List -Force

              Write-Host "=== DEPLOYMENT OPERATIONS (full status messages) ==="
              try {
                Get-AzResourceGroupDeploymentOperation -ResourceGroupName $rg -DeploymentName $name |
                  ForEach-Object {
                    if ($_.Properties.StatusMessage) {
                      try {
                        ($_.Properties.StatusMessage | ConvertTo-Json -Depth 100)
                      } catch {
                        $_.Properties.StatusMessage | Out-String
                      }
                    }
                  }
              } catch {
                Write-Host "(Could not fetch operations: $($_.Exception.Message))"
              }

              throw
            }
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

      # 7) Publish the ZIP to the Web App (uses possibly-updated WEBAPP-NAME)
      - name: Publish Website to WebApp
        uses: Azure/webapps-deploy@v3
        with:
          app-name: ${{ env.WEBAPP-NAME }}
          package: .net-app/app.zip
          type: zip
          app-name: ${{ env.WEBAPP-NAME }}
          package: .net-app/app.zip
          type: zip
